#!/usr/bin/env python
PACKAGE = "roscopter"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("tau", double_t, 0, "Dirty Derivative Filter Constant", 0.0, 0, 1.0);
gen.add("equilibrium_throttle", double_t, 0, "Throttle to hold equilibrium altitude (0. to 1.)", 0.0, 0, 1.0);

vel = gen.add_group("Velocity")
vel.add("x_dot_P", double_t, 0, "Forward Velocity (Vehicle 1 Frame) Proportional gain", 0.0, 0, 5.0);
vel.add("x_dot_I", double_t, 0, "Forward Velocity (Vehicle 1 Frame) Integral gain", 0.0, 0, 5.0);
vel.add("x_dot_D", double_t, 0, "Forward Velocity (Vehicle 1 Frame) Derivative gain", 0.1, 0, 5.0);

vel.add("y_dot_P", double_t, 0, "Right Velocity (Vehicle 1 Frame) Proportional gain", 0.0, 0, 5.0);
vel.add("y_dot_I", double_t, 0, "Right Velocity (Vehicle 1 Frame) Integral gain", 0, 0, 5.0);
vel.add("y_dot_D", double_t, 0, "Right Velocity (Vehicle 1 Frame) Derivative gain", 0.0, 0, 5.0);

vel.add("z_dot_P", double_t, 0, "Down Velocity (Vehicle 1 Frame) Proportional gain", 0.0, 0, 5.0);
vel.add("z_dot_I", double_t, 0, "Down Velocity (Vehicle 1 Frame) Integral gain", 0, 0, 5.0);
vel.add("z_dot_D", double_t, 0, "Down Velocity (Vehicle 1 Frame) Derivative gain", 0.0, 0, 5.0);

pos = gen.add_group("Position")
pos.add("north_P", double_t, 0, "North Position Proportional gain", 0.0, 0, 5.0);
pos.add("north_I", double_t, 0, "North Position Integral gain", 0, 0, 5.0);
pos.add("north_D", double_t, 0, "North Position Derivative gain", 0.0, 0, 5.0);

pos.add("east_P", double_t, 0, "East Position Proportional gain", 0.0, 0, 5.0);
pos.add("east_I", double_t, 0, "East Position Integral gain", 0, 0, 5.0);
pos.add("east_D", double_t, 0, "East Position Derivative gain", 0.0, 0, 5.0);

pos.add("down_P", double_t, 0, "Altitude Proportional gain", 0.0, 0, 5.0);
pos.add("down_I", double_t, 0, "Altitude Integral gain", 0.0, 0, 5.0);
pos.add("down_D", double_t, 0, "Altitude Derivative gain", 0.0, 0, 5.0);

angle = gen.add_group("Angle")
angle.add("psi_P", double_t, 0, "Yaw Angle Proportional gain", 0.0, 0, 25);
angle.add("psi_I", double_t, 0, "Yaw Angle Integral gain", 0, 0, 25);
angle.add("psi_D", double_t, 0, "Yaw Angle Derivative gain", 0, 0, 25);

limits = gen.add_group("Limits")
limits.add("max_roll", double_t, 0, "Maximum Roll Commanded by Controller (rad)", 0.0, 0, 1.5619);
limits.add("max_pitch", double_t, 0, "Maximum Pitch Commanded by Controller (rad)", 0.0, 0, 1.5619);
limits.add("max_yaw_rate", double_t, 0, "Maximum Yaw Rate Commanded by Controller (rad/s)", 0.0, 0, 6.825);
limits.add("max_throttle", double_t, 0, "Maximum Throttle Commanded by Controller (normalized)", 0.0, 0, 1.0);
limits.add("max_n_dot", double_t, 0, "Maximum North Velocity Commanded by Controller (m/s)", 0.0, 0, 45.0);
limits.add("max_e_dot", double_t, 0, "Maximum East Velocity Commanded by Controller (m/s)", 0.0, 0, 45.0);
limits.add("max_d_dot", double_t, 0, "Maximum Down Velocity Commanded by Controller (m/s)", 0.0, 0, 45.0);

exit(gen.generate(PACKAGE, "roscopter", "Controller"))
