<?xml version="1.0"?>
<launch>
  <arg name="visualize"             default="true"/>
  <arg name="mav_name"              default="multirotor"/>
  <arg name="color"                 default="White"/>
  <arg name="x"                     default="2.5"/>
  <arg name="y"                     default="0"/>
  <arg name="z"                     default="0.1"/>
  <arg name="yaw"                   default="0"/>
  <arg name="debug"                 default="false"/>

  <!-- Start Simulator -->
  
  <group unless="$(arg visualize)">
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="paused" value="false"/>
      <arg name="gui" value="false"/>
      <arg name="verbose" value="false"/>
      <arg name="debug" value="$(arg debug)"/>
    </include>
  </group>
  
  <group if="$(arg visualize)">
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="paused" value="true"/>
      <arg name="gui" value="true"/>
      <arg name="verbose" value="false"/>
      <arg name="debug" value="$(arg debug)"/>
    </include>
  </group>

  <!-- Spawn Model in Gazebo -->
  <include file="$(find roscopter_sim)/launch/spawn_mav.launch">
    <arg name="mav_name"            value="$(arg mav_name)" />
    <arg name="model"               value="$(find roscopter_sim)/xacro/$(arg mav_name).urdf.xacro" />
    <arg name="x"                   value="$(arg x)"/>
    <arg name="y"                   value="$(arg y)"/>
    <arg name="z"                   value="$(arg z)"/>
    <arg name="yaw"                 value="$(arg yaw)"/>
    <arg name="color"               value="$(arg color)"/>
  </include>

  <!-- Controller -->
  <group ns="$(arg mav_name)">

    <!-- Load common parameters -->
    <rosparam command="load" file="$(find differential_flatness)/params/$(arg mav_name).yaml"/>

    <!-- Is Flying Publisher -->
    <node pkg="rostopic" type="rostopic" name="is_flying_pub" args="pub is_flying std_msgs/Bool true"/>

    <!-- Status Publisher -->
    <node pkg="rostopic" type="rostopic" name="status_pub" args="pub -r 1 status rosflight_msgs/Status '{armed: true, failsafe: false, rc_override: false, offboard: true, error_code: 0, num_errors: 0, loop_time_us: 1}'"/>

    <!-- PID Position Controller -->
    <node name="controller" pkg="differential_flatness" type="df_controller" output="screen">
      <remap from="estimate" to="ground_truth/odometry/NED"/>
      <remap from="diff_flat_command" to="diff_flat_cmd"/> 
      <remap from="high_level_command" to="trajectory"/>
    </node>

    <!-- LQR Controller -->
     <node name="LQR" pkg="differential_flatness" type="LQR.py" output="screen">
      <remap from="state" to="ground_truth/odometry/NED"/>
      <remap from="estimate" to="estimate"/>
    </node> 

    <!-- inverse -->
    <node name="inverse" pkg="differential_flatness" type="inverse.py" output="screen">
      <remap from="state" to="ground_truth/odometry/NED"/>
      <remap from="feed_forward_control" to="u_raw"/>
       <!--<remap from="command" to="diff_flat_cmd"/> -->
    </node>

    <!-- Attitude_control -->
    <node name="attitude_control" pkg="differential_flatness" type="attitude_control.py" output="screen">
      <remap from="state" to="ground_truth/odometry/NED"/>
    </node>

    <!-- Trajectory Manager -->
    <node name="trajectory" pkg="differential_flatness" type="traj.py" output="screen">
      <remap from="waypoint" to="high_level_command"/>
      <remap from="state" to="ground_truth/odometry/NED"/>
      <!-- <remap from="state" to="estimate"/> -->
    </node>

    <!-- plot states -->
    <node pkg="differential_flatness" type="states_plotter.py" name="states_plotter" output="screen">
      <param name="time_window" value="60.0"/>
    </node> 
    
    <!-- plot states -->
    <!--<node pkg="roscopter" type="states_plotter.py" name="states_plotter" output="screen">-->
      <!--<param name="time_window" value="10.0"/>-->
    <!--</node>-->

  </group>

</launch>
